import customtkinter as ctk
from tkinter import messagebox
# Aseg√∫rate de que tu archivo de conexi√≥n se llama as√≠ o aj√∫stalo
# import ConexionBDD as db 
from PIL import Image
from pathlib import Path

# Simulaci√≥n del m√≥dulo de base de datos para que el c√≥digo sea ejecutable
class db:
    @staticmethod
    def get_user_info(user_id): return "Admin"
    @staticmethod
    def get_all_categories(): return [(1, "Programaci√≥n"), (2, "Ciberseguridad"), (3, "Ciencia")]
    # Puedes a√±adir las otras funciones si las necesitas para probar

class AdminWindow(ctk.CTkToplevel):
    """
    Ventana de administraci√≥n redise√±ada con una barra de navegaci√≥n lateral vertical,
    inspirada en un dise√±o moderno con panel izquierdo blanco y tarjetas con sombra.
    Ahora, las tarjetas del dashboard tienen una forma rectangular de lista.
    El t√≠tulo del panel lateral se reemplaza por la imagen "adorno.png".
    """
    def __init__(self, master, user_id):
        super().__init__(master=master)
        self.master_app = master
        self.user_id = user_id
        self.username = db.get_user_info(user_id)
        
        self.title("Panel de Administraci√≥n del Blog")
        self.geometry("1200x750") 
        self.resizable(False, False)
        
        self.protocol("WM_DELETE_WINDOW", self.destroy)
        
        ### CAMBIO ###
        # Variable para saber si estamos editando un art√≠culo o creando uno nuevo
        self.editing_article_id = None
        
        # --- Paleta de Colores y Fuentes para f√°cil modificaci√≥n ---
        self.SIDEBAR_BG = "#FFFFFF"
        self.CONTENT_BG = "#F5F5F5"
        self.CARD_BG = "#FFFFFF"
        self.PRIMARY_TEXT = "#212121"
        self.SECONDARY_TEXT = "#757575"
        self.ACCENT_COLOR = "#7E57C2" 

        # --- Configuraci√≥n de la cuadr√≠cula principal ---
        self.grid_columnconfigure(1, weight=1) 
        self.grid_rowconfigure(0, weight=1)

        # --- Creaci√≥n de la UI ---
        self._create_sidebar()
        self._create_content_area()
        self._setup_content_frames()

        # Mostrar el frame inicial (el dashboard)
        self.show_frame(self.dashboard_frame)

    # ... (El resto de los m√©todos como _create_sidebar, _create_content_area, etc., se mantienen igual) ...
    # PEGA AQU√ç LOS M√âTODOS QUE NO CAMBIAN
    # 1. --- ESTRUCTURA PRINCIPAL ---

    def _create_sidebar(self):
        """Crea la barra de navegaci√≥n lateral izquierda con efecto de sombra."""
        shadow_container = ctk.CTkFrame(self, fg_color="#E0E0E0", width=242, corner_radius=0)
        shadow_container.grid(row=0, column=0, sticky="nsw")
        
        sidebar_frame = ctk.CTkFrame(shadow_container, width=240, corner_radius=0, fg_color=self.SIDEBAR_BG)
        sidebar_frame.pack(side="left", fill="y")
        sidebar_frame.grid_propagate(False) 
        sidebar_frame.grid_rowconfigure(7, weight=1) 

        # --- T√≠tulo con imagen ---
        try:
            script_path = Path(__file__).parent
            image_path = script_path / "imagenes" / "adorno.png"
            
            original_image = Image.open(image_path)
            original_width, original_height = original_image.size

            desired_width = 200
            aspect_ratio = original_height / float(original_width)
            desired_height = int(desired_width * aspect_ratio)

            resized_image = original_image.resize((desired_width, desired_height), Image.Resampling.LANCZOS)
            
            sidebar_image_obj = ctk.CTkImage(
                light_image=resized_image,
                dark_image=resized_image,
                size=(desired_width, desired_height)
            )
            
            image_label = ctk.CTkLabel(sidebar_frame, text="", image=sidebar_image_obj)
            image_label.grid(row=0, column=0, padx=20, pady=(20, 30), sticky="ew")

        except Exception as e:
            full_path = Path(__file__).parent / "imagenes" / "adorno.png"
            error_msg = f"No se pudo cargar 'adorno.png'.\n\nRuta: {full_path.resolve()}\nError: {e}"
            messagebox.showerror("Error de Imagen", error_msg, parent=self)
            
            ctk.CTkLabel(sidebar_frame, text="Admin Panel ‚öôÔ∏è", font=ctk.CTkFont(size=24, weight="bold"), text_color=self.PRIMARY_TEXT).grid(row=0, column=0, padx=20, pady=(20, 30), sticky="ew")
        
        # Botones de navegaci√≥n
        self._create_nav_button(sidebar_frame, "Inicio", lambda: self.show_frame(self.dashboard_frame), row=1)
        self._create_nav_button(sidebar_frame, "Art√≠culos", lambda: self.show_frame(self.articles_frame), row=2)
        self._create_nav_button(sidebar_frame, "Categor√≠as", lambda: self.show_frame(self.categories_frame), row=3)
        self._create_nav_button(sidebar_frame, "Comentarios", lambda: self.show_frame(self.comments_frame), row=4)
        self._create_nav_button(sidebar_frame, "Tags", lambda: self.show_frame(self.tags_frame), row=5)
        self._create_nav_button(sidebar_frame, "Usuarios", lambda: self.show_frame(self.users_frame), row=6)
        
        # Bot√≥n para volver, al final
        ctk.CTkButton(
            sidebar_frame, 
            text="Volver al Blog ‚Ü©Ô∏è", 
            command=self.destroy, 
            fg_color="#F44336", 
            hover_color="#D32F2F"
        ).grid(row=8, column=0, padx=20, pady=20, sticky="s")
        
    def _create_content_area(self):
        """Crea el contenedor principal donde se mostrar√°n los diferentes frames."""
        self.content_container = ctk.CTkFrame(self, fg_color=self.CONTENT_BG, corner_radius=0)
        self.content_container.grid(row=0, column=1, sticky="nsew")
        self.content_container.grid_rowconfigure(0, weight=1)
        self.content_container.grid_columnconfigure(0, weight=1)

    def _setup_content_frames(self):
        """Inicializa todos los frames de contenido que se usar√°n."""
        self.dashboard_frame = ctk.CTkFrame(self.content_container, fg_color="transparent")
        self.categories_frame = ctk.CTkFrame(self.content_container, fg_color="transparent")
        self.users_frame = ctk.CTkFrame(self.content_container, fg_color="transparent")
        self.profile_frame = ctk.CTkFrame(self.content_container, fg_color="transparent")
        self.comments_frame = ctk.CTkFrame(self.content_container, fg_color="transparent")
        self.tags_frame = ctk.CTkFrame(self.content_container, fg_color="transparent")

        # --- Panel de Art√≠culos (Nuevo y completo) ---
        self.articles_frame = ctk.CTkFrame(self.content_container, fg_color="transparent")
        self._setup_articles_content(self.articles_frame)

        # Configurar el contenido de los otros frames
        self._setup_dashboard_content(self.dashboard_frame)
        # self._setup_categories_content(self.categories_frame)
        # self._setup_users_content(self.users_frame)
        # self._setup_profile_content(self.profile_frame)
        
    def show_frame(self, frame_to_show):
        """Oculta todos los frames y muestra solo el seleccionado."""
        for frame in [self.dashboard_frame, self.categories_frame, self.users_frame, self.profile_frame, self.articles_frame, self.comments_frame, self.tags_frame]:
            frame.grid_forget()
        frame_to_show.grid(row=0, column=0, sticky="nsew", padx=40, pady=30)

    # 2. --- CONTENIDO DE CADA FRAME ---
    
    def _setup_dashboard_content(self, parent_frame):
        """Crea el contenido del dashboard principal con las tarjetas en formato de lista."""
        parent_frame.grid_columnconfigure(0, weight=1) 

        ctk.CTkLabel(parent_frame, text="Bienvenido al Panel de Administraci√≥n del Blog", font=ctk.CTkFont(size=28, weight="bold"), text_color=self.PRIMARY_TEXT, anchor="w").pack(fill="x", pady=(0, 5))
        ctk.CTkLabel(parent_frame, text="Desde aqu√≠ puedes gestionar todos los aspectos de tu blog:", font=ctk.CTkFont(size=16), text_color=self.SECONDARY_TEXT, anchor="w").pack(fill="x", pady=(0, 25))

        cards_container = ctk.CTkScrollableFrame(parent_frame, fg_color="transparent")
        cards_container.pack(fill="both", expand=True, padx=0, pady=0) 
        cards_container.grid_columnconfigure(0, weight=1) 

        self._create_dashboard_card(cards_container, "Art√≠culos", "Gestiona los art√≠culos del blog: crear, editar y eliminar.", lambda: self.show_frame(self.articles_frame))
        self._create_dashboard_card(cards_container, "Categor√≠as", "Organiza tus art√≠culos por categor√≠as.", lambda: self.show_frame(self.categories_frame))
        self._create_dashboard_card(cards_container, "Comentarios", "Modera los comentarios de los lectores.", lambda: self.show_frame(self.comments_frame))
        self._create_dashboard_card(cards_container, "Tags", "Gestiona las etiquetas para tus art√≠culos.", lambda: self.show_frame(self.tags_frame))
        self._create_dashboard_card(cards_container, "Usuarios", "Administra los usuarios del sistema.", lambda: self.show_frame(self.users_frame))
        
    ### CAMBIO ###
    # El m√©todo _setup_articles_content ha sido reestructurado
    def _setup_articles_content(self, parent_frame):
        """Crea el contenido del panel de gesti√≥n de art√≠culos."""
        parent_frame.grid_columnconfigure(0, weight=1)
        parent_frame.grid_rowconfigure(2, weight=1) # Fila 2 para la lista

        # --- Contenedor de T√≠tulo y Bot√≥n de Agregar ---
        header_frame = ctk.CTkFrame(parent_frame, fg_color="transparent")
        header_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=(0, 20))
        header_frame.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(header_frame, text="Gesti√≥n de Art√≠culos üìù", font=ctk.CTkFont(size=24, weight="bold"), anchor="w").grid(row=0, column=0, sticky="w")
        
        self.add_article_btn = ctk.CTkButton(header_frame, text="‚ûï Crear Nuevo Art√≠culo", command=self.show_add_article_form)
        self.add_article_btn.grid(row=0, column=1, sticky="e")

        # --- Card para Agregar/Editar Art√≠culo (inicialmente oculta) ---
        self.add_article_card = ctk.CTkFrame(parent_frame, fg_color=self.CARD_BG, border_width=1, border_color="#E0E0E0", corner_radius=12)
        # NO se usa .grid() o .pack() aqu√≠ para mantenerla oculta
        self.add_article_card.grid_columnconfigure(0, weight=1)

        self.add_article_label = ctk.CTkLabel(self.add_article_card, text="Agregar Nuevo Art√≠culo", font=ctk.CTkFont(size=18, weight="bold"), anchor="w")
        self.add_article_label.grid(row=0, column=0, columnspan=2, padx=20, pady=(15, 10), sticky="w")
        
        ctk.CTkLabel(self.add_article_card, text="T√≠tulo:", anchor="w").grid(row=1, column=0, columnspan=2, padx=20, pady=(5, 2), sticky="w")
        self.article_title_entry = ctk.CTkEntry(self.add_article_card, placeholder_text="El t√≠tulo de tu incre√≠ble art√≠culo", height=40)
        self.article_title_entry.grid(row=2, column=0, columnspan=2, padx=20, pady=(0, 10), sticky="ew")

        ctk.CTkLabel(self.add_article_card, text="Contenido:", anchor="w").grid(row=3, column=0, columnspan=2, padx=20, pady=(5, 2), sticky="w")
        self.article_content_textbox = ctk.CTkTextbox(self.add_article_card, height=120)
        self.article_content_textbox.grid(row=4, column=0, columnspan=2, padx=20, pady=(0, 10), sticky="ew")

        ctk.CTkLabel(self.add_article_card, text="Categor√≠a:", anchor="w").grid(row=5, column=0, padx=20, pady=(5, 2), sticky="w")
        categories = db.get_all_categories()
        category_names = [name for id, name in categories] if categories else ["Sin categor√≠as"]
        self.article_category_combo = ctk.CTkComboBox(self.add_article_card, values=category_names, height=40)
        self.article_category_combo.grid(row=6, column=0, padx=20, pady=(0, 20), sticky="ew")

        btn_frame = ctk.CTkFrame(self.add_article_card, fg_color="transparent")
        btn_frame.grid(row=6, column=1, padx=20, pady=(0, 20), sticky="e")
        self.save_article_btn = ctk.CTkButton(btn_frame, text="Guardar", command=self.handle_save_article, height=40, fg_color=self.ACCENT_COLOR, hover_color="#673AB7")
        self.save_article_btn.pack(side="left", padx=(0, 10))
        ctk.CTkButton(btn_frame, text="Cancelar", command=self.hide_add_article_form, height=40, fg_color="#757575", hover_color="#616161").pack(side="left")

        # --- Card para Listar Art√≠culos ---
        self.list_card = ctk.CTkFrame(parent_frame, fg_color=self.CARD_BG, border_width=1, border_color="#E0E0E0", corner_radius=12)
        self.list_card.grid(row=2, column=0, sticky="nsew", padx=10, pady=0) # Fila 2
        self.list_card.grid_columnconfigure(0, weight=1)
        self.list_card.grid_rowconfigure(1, weight=1)

        ctk.CTkLabel(self.list_card, text="Lista de Art√≠culos", font=ctk.CTkFont(size=18, weight="bold"), anchor="w").grid(row=0, column=0, padx=20, pady=(15, 10), sticky="w")
        
        self.articles_list_scrollframe = ctk.CTkScrollableFrame(self.list_card, fg_color="transparent")
        self.articles_list_scrollframe.grid(row=1, column=0, padx=15, pady=15, sticky="nsew")
        self.articles_list_scrollframe.grid_columnconfigure(0, weight=1)

        self.load_articles_list()


    # ... (El resto de los m√©todos _setup se mantienen igual) ...

    # 3. --- L√ìGICA Y HANDLERS ---
    
    def load_articles_list(self):
        """Carga y muestra la lista de art√≠culos."""
        for widget in self.articles_list_scrollframe.winfo_children():
            widget.destroy()

        header = ctk.CTkFrame(self.articles_list_scrollframe, fg_color="#F5F5F5", height=40)
        header.pack(fill="x", pady=(0, 5), padx=5)
        header.grid_columnconfigure(0, weight=2)
        header.grid_columnconfigure(1, weight=1)
        header.grid_columnconfigure(2, weight=1)
        
        ctk.CTkLabel(header, text="T√≠tulo", font=ctk.CTkFont(weight="bold"), anchor="w").grid(row=0, column=0, padx=10, sticky="w")
        ctk.CTkLabel(header, text="Categor√≠a", font=ctk.CTkFont(weight="bold"), anchor="w").grid(row=0, column=1, padx=10, sticky="w")
        ctk.CTkLabel(header, text="Acciones", font=ctk.CTkFont(weight="bold"), anchor="center").grid(row=0, column=2, padx=10)

        # Simulaci√≥n de datos
        articles = [
            (1, 'Introducci√≥n a Python', 'Programaci√≥n', 'Este es el contenido de Python...'),
            (2, '¬øQu√© es la Ciberseguridad?', 'Ciberseguridad', 'Contenido sobre ciberseguridad...'),
            (3, 'Los avances en la ciencia de datos', 'Ciencia', 'Muchos datos y ciencia...')
        ]

        if not articles:
            ctk.CTkLabel(self.articles_list_scrollframe, text="No hay art√≠culos para mostrar.").pack(pady=30)
            return

        for i, (art_id, title, category, content) in enumerate(articles):
            bg_color = "#FFFFFF" if i % 2 == 0 else "#FAFAFA"
            row = ctk.CTkFrame(self.articles_list_scrollframe, fg_color=bg_color, corner_radius=4)
            row.pack(fill="x", pady=2, padx=5)
            row.grid_columnconfigure(0, weight=2)
            row.grid_columnconfigure(1, weight=1)
            row.grid_columnconfigure(2, weight=1)

            ctk.CTkLabel(row, text=title, anchor="w", wraplength=300).grid(row=0, column=0, padx=10, pady=8, sticky="w")
            ctk.CTkLabel(row, text=category, anchor="w").grid(row=0, column=1, padx=10, pady=8, sticky="w")
            
            actions_frame = ctk.CTkFrame(row, fg_color="transparent")
            actions_frame.grid(row=0, column=2, padx=10)
            
            edit_command = lambda id=art_id, t=title, cat=category, con=content: self.show_edit_article_form(id, t, cat, con)
            ctk.CTkButton(actions_frame, text="Editar", width=70, fg_color="#1E88E5", hover_color="#1565C0", command=edit_command).pack(side="left", padx=(0, 5))
            ctk.CTkButton(actions_frame, text="Eliminar", width=70, fg_color="#F44336", hover_color="#D32F2F", command=lambda id=art_id: self.handle_delete_article(id)).pack(side="left")

    ### CAMBIO ###
    # Nueva funci√≥n unificada para guardar (crear o actualizar)
    def handle_save_article(self):
        title = self.article_title_entry.get()
        content = self.article_content_textbox.get("1.0", "end-1c")
        category = self.article_category_combo.get()

        if not title or not content or category == "Sin categor√≠as":
            messagebox.showwarning("Campos incompletos", "Por favor, completa todos los campos.", parent=self)
            return
        
        if self.editing_article_id is not None:
            # L√≥gica para ACTUALIZAR en la BDD
            print(f"Actualizando art√≠culo ID {self.editing_article_id}:\nT√≠tulo: {title}\nCategor√≠a: {category}")
            messagebox.showinfo("√âxito", f"Art√≠culo '{title}' actualizado (simulaci√≥n).", parent=self)
        else:
            # L√≥gica para AGREGAR a la BDD
            print(f"Guardando nuevo art√≠culo:\nT√≠tulo: {title}\nCategor√≠a: {category}")
            messagebox.showinfo("√âxito", f"Art√≠culo '{title}' guardado (simulaci√≥n).", parent=self)
        
        self.hide_add_article_form()
        self.load_articles_list()
    
    def clear_article_form(self):
        self.editing_article_id = None # Resetea el ID de edici√≥n
        self.article_title_entry.delete(0, "end")
        self.article_content_textbox.delete("1.0", "end")
        if self.article_category_combo.cget("values"):
            self.article_category_combo.set(self.article_category_combo.cget("values")[0])

    ### CAMBIO ###
    # Nuevas funciones para mostrar y ocultar el formulario
    def show_add_article_form(self):
        """Muestra el formulario para agregar un nuevo art√≠culo."""
        self.clear_article_form()
        self.add_article_label.configure(text="Agregar Nuevo Art√≠culo")
        self.save_article_btn.configure(text="Guardar")
        self.add_article_card.grid(row=1, column=0, sticky="ew", padx=10, pady=(0, 20)) # Lo muestra
        self.add_article_btn.grid_forget() # Oculta el bot√≥n de crear

    def show_edit_article_form(self, article_id, title, category, content):
        """Muestra el formulario para editar un art√≠culo existente."""
        self.clear_article_form()
        self.editing_article_id = article_id
        
        # Llenar el formulario con los datos existentes
        self.article_title_entry.insert(0, title)
        self.article_content_textbox.insert("1.0", content)
        self.article_category_combo.set(category)
        
        self.add_article_label.configure(text=f"Editando Art√≠culo: {title}")
        self.save_article_btn.configure(text="Actualizar")
        self.add_article_card.grid(row=1, column=0, sticky="ew", padx=10, pady=(0, 20)) # Lo muestra
        self.add_article_btn.grid_forget() # Oculta el bot√≥n de crear

    def hide_add_article_form(self):
        """Oculta el formulario y resetea su estado."""
        self.add_article_card.grid_forget() # Lo oculta
        self.add_article_btn.grid(row=0, column=1, sticky="e") # Muestra de nuevo el bot√≥n "Crear"
        self.clear_article_form()

    ### CAMBIO ###
    # handle_edit_article ya no es necesario, su l√≥gica est√° en show_edit_article_form
    # handle_add_article fue renombrado a handle_save_article

    def handle_delete_article(self, article_id):
        if messagebox.askyesno("Confirmar eliminaci√≥n", f"¬øEst√°s seguro de que quieres eliminar el art√≠culo con ID {article_id}?", parent=self):
            print(f"Eliminando art√≠culo con ID: {article_id}")
            messagebox.showinfo("√âxito", f"Art√≠culo {article_id} eliminado (simulaci√≥n).", parent=self)
            self.load_articles_list()

    # ... (El resto de tus m√©todos se mantienen igual) ...
    # PEGA AQU√ç LOS M√âTODOS QUE NO CAMBIAN
    
    # 4. --- HELPERS DE UI ---
    
    def _create_nav_button(self, parent, text, command, row):
        """Crea un bot√≥n estandarizado para la barra de navegaci√≥n lateral."""
        button = ctk.CTkButton(
            parent,
            text=text,
            command=command,
            fg_color="transparent",
            hover_color="#F0F0F0",
            text_color=self.PRIMARY_TEXT,
            anchor="w",
            font=ctk.CTkFont(size=16),
            height=45
        )
        button.grid(row=row, column=0, padx=20, pady=4, sticky="ew")
        return button

    def _create_dashboard_card(self, parent, title, description, command):
        """Crea una tarjeta de informaci√≥n moderna para el dashboard en formato de lista."""
        card = ctk.CTkFrame(parent, fg_color=self.CARD_BG, border_width=1, border_color="#E0E0E0", corner_radius=12)
        card.pack(fill="x", padx=15, pady=8) 
        
        card.bind("<Enter>", lambda e: card.configure(fg_color="#F9F9F9"))
        card.bind("<Leave>", lambda e: card.configure(fg_color=self.CARD_BG))
        card.bind("<Button-1>", lambda e: command())

        card.grid_columnconfigure(1, weight=1) 
        
        text_container = ctk.CTkFrame(card, fg_color="transparent")
        text_container.grid(row=0, column=1, sticky="nsew", padx=20, pady=15)
        text_container.grid_columnconfigure(0, weight=1)
        
        title_label = ctk.CTkLabel(text_container, text=title, font=ctk.CTkFont(size=20, weight="bold"), text_color=self.PRIMARY_TEXT, anchor="w")
        title_label.grid(row=0, column=0, sticky="ew")
        
        desc_label = ctk.CTkLabel(text_container, text=description, text_color=self.SECONDARY_TEXT, wraplength=500, anchor="w", justify="left")
        desc_label.grid(row=1, column=0, sticky="ew", pady=(4, 0))

        title_label.bind("<Button-1>", lambda e: command())
        desc_label.bind("<Button-1>", lambda e: command())
        text_container.bind("<Button-1>", lambda e: command())

        arrow_label = ctk.CTkLabel(card, text="‚Üí", font=ctk.CTkFont(size=24))
        arrow_label.grid(row=0, column=2, padx=20)
        arrow_label.bind("<Button-1>", lambda e: command())

# Para poder probar la ventana directamente
if __name__ == "__main__":
    app = ctk.CTk()
    app.title("App Principal")
    
    def open_admin_panel():
        admin_win = AdminWindow(app, user_id=1)
        admin_win.grab_set() # Para hacerla modal

    ctk.CTkButton(app, text="Abrir Panel de Admin", command=open_admin_panel).pack(padx=50, pady=50)
    
    app.mainloop()