-- ================================
-- 1. TABLAS y CONSTRAINTS
-- ================================
SET SERVEROUTPUT ON

-- USERS
CREATE TABLE users (
  id       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  name     VARCHAR2(100) NOT NULL,
  email    VARCHAR2(150) NOT NULL UNIQUE
);

-- ARTICLES
CREATE TABLE articles (
  id           NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  user_id      NUMBER NOT NULL,
  title        VARCHAR2(255) NOT NULL,
  date_created DATE DEFAULT SYSDATE NOT NULL,
  text         CLOB,
  CONSTRAINT fk_articles_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- COMMENTS
CREATE TABLE comments (
  id           NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  article_id   NUMBER NOT NULL,
  user_id      NUMBER,              
  name         VARCHAR2(100),       
  url          VARCHAR2(255),
  text         CLOB NOT NULL,
  date_created DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT fk_comments_article FOREIGN KEY (article_id) REFERENCES articles(id) ON DELETE CASCADE,
  CONSTRAINT fk_comments_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
);

-- TAGS
CREATE TABLE tags (
  id   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  name VARCHAR2(100) NOT NULL UNIQUE,
  url  VARCHAR2(255)
);

-- CATEGORIES
CREATE TABLE categories (
  id   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  name VARCHAR2(100) NOT NULL UNIQUE,
  url  VARCHAR2(255)
);

-- ARTICLE_TAGS
CREATE TABLE article_tags (
  article_id NUMBER NOT NULL,
  tag_id     NUMBER NOT NULL,
  CONSTRAINT pk_article_tags PRIMARY KEY (article_id, tag_id),
  CONSTRAINT fk_at_article FOREIGN KEY (article_id) REFERENCES articles(id) ON DELETE CASCADE,
  CONSTRAINT fk_at_tag FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE
);

CREATE TABLE article_categories (
  article_id  NUMBER NOT NULL,
  category_id NUMBER NOT NULL,
  CONSTRAINT pk_article_categories PRIMARY KEY (article_id, category_id),
  CONSTRAINT fk_ac_article FOREIGN KEY (article_id) REFERENCES articles(id) ON DELETE CASCADE,
  CONSTRAINT fk_ac_category FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
);

-- ================================
-- 2. PL/SQL: 
-- Procedimientos/funciones
-- ================================
CREATE OR REPLACE PACKAGE blog_pkg AS
  -- tipos
  TYPE ref_cursor IS REF CURSOR;

  -- USERS
  PROCEDURE create_user(p_name IN VARCHAR2, p_email IN VARCHAR2, p_id OUT NUMBER);
  PROCEDURE delete_user(p_user_id IN NUMBER);

  -- ARTICLES
  PROCEDURE create_article(p_user_id IN NUMBER, p_title IN VARCHAR2, p_text IN CLOB, p_id OUT NUMBER);
  PROCEDURE update_article(p_article_id IN NUMBER, p_title IN VARCHAR2, p_text IN CLOB);
  PROCEDURE delete_article(p_article_id IN NUMBER);

  -- TAGS & CATEGORIES
  PROCEDURE create_tag(p_name IN VARCHAR2, p_url IN VARCHAR2, p_id OUT NUMBER);
  PROCEDURE create_category(p_name IN VARCHAR2, p_url IN VARCHAR2, p_id OUT NUMBER);
  PROCEDURE assign_tag_to_article(p_article_id IN NUMBER, p_tag_id IN NUMBER);
  PROCEDURE assign_category_to_article(p_article_id IN NUMBER, p_category_id IN NUMBER);

  -- COMMENTS
  PROCEDURE create_comment(p_article_id IN NUMBER, p_user_id IN NUMBER, p_name IN VARCHAR2, p_url IN VARCHAR2, p_text IN CLOB, p_id OUT NUMBER);

  -- LECTURAS (DEVUELVEN REF CURSORS)
  PROCEDURE list_articles(p_cur OUT ref_cursor);
  PROCEDURE get_article_by_id(p_article_id IN NUMBER, p_cur OUT ref_cursor);
  PROCEDURE list_comments_by_article(p_article_id IN NUMBER, p_cur OUT ref_cursor);
  PROCEDURE list_articles_by_tag(p_tag_id IN NUMBER, p_cur OUT ref_cursor);
  PROCEDURE list_articles_by_category(p_category_id IN NUMBER, p_cur OUT ref_cursor);

END blog_pkg;
/
CREATE OR REPLACE PACKAGE BODY blog_pkg AS

  ----------------------------------------------------------------
  -- USERS
  ----------------------------------------------------------------
  PROCEDURE create_user(p_name IN VARCHAR2, p_email IN VARCHAR2, p_id OUT NUMBER) IS
  BEGIN
    INSERT INTO users(name, email) VALUES (p_name, p_email) RETURNING id INTO p_id;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END create_user;

  PROCEDURE delete_user(p_user_id IN NUMBER) IS
  BEGIN
    DELETE FROM users WHERE id = p_user_id;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END delete_user;

  ----------------------------------------------------------------
  -- ARTICLES
  ----------------------------------------------------------------
  PROCEDURE create_article(p_user_id IN NUMBER, p_title IN VARCHAR2, p_text IN CLOB, p_id OUT NUMBER) IS
  BEGIN
    INSERT INTO articles(user_id, title, text) VALUES (p_user_id, p_title, p_text) RETURNING id INTO p_id;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END create_article;

  PROCEDURE update_article(p_article_id IN NUMBER, p_title IN VARCHAR2, p_text IN CLOB) IS
  BEGIN
    UPDATE articles SET title = p_title, text = p_text WHERE id = p_article_id;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END update_article;

  PROCEDURE delete_article(p_article_id IN NUMBER) IS
  BEGIN
    DELETE FROM articles WHERE id = p_article_id;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END delete_article;

  ----------------------------------------------------------------
  -- TAGS & CATEGORIES & ASSIGN
  ----------------------------------------------------------------
  PROCEDURE create_tag(p_name IN VARCHAR2, p_url IN VARCHAR2, p_id OUT NUMBER) IS
  BEGIN
    INSERT INTO tags(name, url) VALUES (p_name, p_url) RETURNING id INTO p_id;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END create_tag;

  PROCEDURE create_category(p_name IN VARCHAR2, p_url IN VARCHAR2, p_id OUT NUMBER) IS
  BEGIN
    INSERT INTO categories(name, url) VALUES (p_name, p_url) RETURNING id INTO p_id;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END create_category;

  PROCEDURE assign_tag_to_article(p_article_id IN NUMBER, p_tag_id IN NUMBER) IS
  BEGIN
    -- evita duplicados por PK 
    BEGIN
      INSERT INTO article_tags(article_id, tag_id) VALUES (p_article_id, p_tag_id);
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        NULL; -- ya existe
    END;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END assign_tag_to_article;

  PROCEDURE assign_category_to_article(p_article_id IN NUMBER, p_category_id IN NUMBER) IS
  BEGIN
    BEGIN
      INSERT INTO article_categories(article_id, category_id) VALUES (p_article_id, p_category_id);
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        NULL;
    END;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END assign_category_to_article;

  ----------------------------------------------------------------
  -- COMMENTS
  ----------------------------------------------------------------
  PROCEDURE create_comment(p_article_id IN NUMBER, p_user_id IN NUMBER, p_name IN VARCHAR2, p_url IN VARCHAR2, p_text IN CLOB, p_id OUT NUMBER) IS
  BEGIN
    INSERT INTO comments(article_id, user_id, name, url, text) 
    VALUES (p_article_id, p_user_id, p_name, p_url, p_text) RETURNING id INTO p_id;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END create_comment;

  
  PROCEDURE list_articles(p_cur OUT ref_cursor) IS
  BEGIN
    OPEN p_cur FOR
      SELECT a.id, a.title, a.date_created, a.text, u.id user_id, u.name author_name, u.email author_email
      FROM articles a JOIN users u ON a.user_id = u.id
      ORDER BY a.date_created DESC;
  END list_articles;

  PROCEDURE get_article_by_id(p_article_id IN NUMBER, p_cur OUT ref_cursor) IS
  BEGIN
    OPEN p_cur FOR
      SELECT a.id, a.title, a.date_created, a.text, u.id user_id, u.name author_name, u.email author_email
      FROM articles a JOIN users u ON a.user_id = u.id
      WHERE a.id = p_article_id;
  END get_article_by_id;

  PROCEDURE list_comments_by_article(p_article_id IN NUMBER, p_cur OUT ref_cursor) IS
  BEGIN
    OPEN p_cur FOR
      SELECT c.id, c.date_created, c.name commenter_name, c.url commenter_url, c.text,
             c.user_id
      FROM comments c
      WHERE c.article_id = p_article_id
      ORDER BY c.date_created ASC;
  END list_comments_by_article;

  PROCEDURE list_articles_by_tag(p_tag_id IN NUMBER, p_cur OUT ref_cursor) IS
  BEGIN
    OPEN p_cur FOR
      SELECT a.id, a.title, a.date_created, a.text
      FROM articles a
      JOIN article_tags at ON a.id = at.article_id
      WHERE at.tag_id = p_tag_id
      ORDER BY a.date_created DESC;
  END list_articles_by_tag;

  PROCEDURE list_articles_by_category(p_category_id IN NUMBER, p_cur OUT ref_cursor) IS
  BEGIN
    OPEN p_cur FOR
      SELECT a.id, a.title, a.date_created, a.text
      FROM articles a
      JOIN article_categories ac ON a.id = ac.article_id
      WHERE ac.category_id = p_category_id
      ORDER BY a.date_created DESC;
  END list_articles_by_category;

END blog_pkg;
/
