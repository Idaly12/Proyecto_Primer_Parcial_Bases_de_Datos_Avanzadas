--------------------------------------------------------------------------------
-- 1. ELIMINAR TABLAS
--------------------------------------------------------------------------------

DROP TABLE article_categories CASCADE CONSTRAINTS;
DROP TABLE article_tags CASCADE CONSTRAINTS;
DROP TABLE comments CASCADE CONSTRAINTS;
DROP TABLE articles CASCADE CONSTRAINTS;
DROP TABLE categories CASCADE CONSTRAINTS;
DROP TABLE tags CASCADE CONSTRAINTS;
DROP TABLE users CASCADE CONSTRAINTS;

--------------------------------------------------------------------------------
-- 2. CREACIÓN DE TABLAS
--------------------------------------------------------------------------------

-- Tabla de Usuarios
CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(100) NOT NULL UNIQUE,
    email VARCHAR2(200) NOT NULL UNIQUE,
    password VARCHAR2(200) NOT NULL,
    -- 1 = Admin, 0 = Normal
    IS_ADMIN NUMBER(1) DEFAULT 0 NOT NULL,
    CONSTRAINT chk_username CHECK (LENGTH(username) >= 3)
);

-- Tabla de Artículos
CREATE TABLE articles (
    article_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(200) NOT NULL,
    article_date DATE DEFAULT SYSDATE,
    article_text CLOB,
    user_id NUMBER NOT NULL,
    CONSTRAINT fk_article_user FOREIGN KEY(user_id) REFERENCES users(user_id),
    CONSTRAINT chk_title CHECK (LENGTH(title) >= 3)
);

-- Tabla de Comentarios
CREATE TABLE comments (
    comment_id  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR2(100) NOT NULL,
    url         VARCHAR2(200),
    text        CLOB NOT NULL,
    created_at  DATE DEFAULT SYSDATE,
    article_id  NUMBER NOT NULL,
    user_id     NUMBER NOT NULL,

    -- Añadimos ON DELETE CASCADE a los comentarios para que se borren con el artículo
    CONSTRAINT fk_comment_article FOREIGN KEY(article_id) REFERENCES articles(article_id) ON DELETE CASCADE,
    CONSTRAINT fk_comment_user FOREIGN KEY(user_id) REFERENCES users(user_id)
);

-- Tabla de Etiquetas (Tags)
CREATE TABLE tags (
    tag_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tag_name VARCHAR2(100) NOT NULL UNIQUE
);

-- Tabla de Categorías
CREATE TABLE categories (
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR2(100) NOT NULL UNIQUE
);

-- Tabla de relación Artículos-Etiquetas (Con ON DELETE CASCADE)
CREATE TABLE article_tags (
    article_id NUMBER NOT NULL,
    tag_id NUMBER NOT NULL,
    CONSTRAINT pk_article_tags PRIMARY KEY(article_id, tag_id),
    CONSTRAINT fk_article_tags_article FOREIGN KEY(article_id) REFERENCES articles(article_id) ON DELETE CASCADE,
    CONSTRAINT fk_article_tags_tag FOREIGN KEY(tag_id) REFERENCES tags(tag_id) ON DELETE CASCADE
);

-- Tabla de relación Artículos-Categorías (Con ON DELETE CASCADE)
CREATE TABLE article_categories (
    article_id NUMBER NOT NULL,
    category_id NUMBER NOT NULL,
    CONSTRAINT pk_article_categories PRIMARY KEY(article_id, category_id),
    CONSTRAINT fk_article_categories_article FOREIGN KEY(article_id) REFERENCES articles(article_id) ON DELETE CASCADE,
    CONSTRAINT fk_article_categories_category FOREIGN KEY(category_id) REFERENCES categories(category_id) ON DELETE CASCADE
);


--------------------------------------------------------------------------------
-- 3. TIPOS DE DATOS (REF CURSOR)
--------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE types
AS
    TYPE ref_cursor IS REF CURSOR;
END types;
/
--------------------------------------------------------------------------------
-- 4. PROCEDIMIENTOS DE CREACIÓN
--------------------------------------------------------------------------------

-- Agregar un nuevo usuario (Contiene la CLAVE SECRETA para admin)
CREATE OR REPLACE PROCEDURE add_user(
    p_username IN VARCHAR2,
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_admin_key IN VARCHAR2 DEFAULT NULL
) AS
    v_is_admin users.is_admin%TYPE := 0;
    CLAVE_SECRETA CONSTANT VARCHAR2(50) := 'miblog';
BEGIN
    -- Si la clave secreta coincide, se asigna el rol de administrador.
    IF p_admin_key IS NOT NULL AND TRIM(p_admin_key) = CLAVE_SECRETA THEN
        v_is_admin := 1;
    END IF;

    INSERT INTO users (username, email, password, is_admin)
    VALUES (p_username, p_email, p_password, v_is_admin);

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error al insertar usuario: ' || SQLERRM);
END;
/


--------------------------------------------------------------------------------
-- 5. PROCEDIMIENTOS DE CREACIÓN
--------------------------------------------------------------------------------

-- Agregar un nuevo usuario
CREATE OR REPLACE PROCEDURE add_user(
    p_username IN VARCHAR2,
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_admin_key IN VARCHAR2 DEFAULT NULL
) AS
    v_is_admin users.is_admin%TYPE := 0;
    CLAVE_SECRETA CONSTANT VARCHAR2(50) := 'miblog';
BEGIN
    IF p_admin_key IS NOT NULL AND TRIM(p_admin_key) = CLAVE_SECRETA THEN
        v_is_admin := 1;
    END IF;

    INSERT INTO users (username, email, password, is_admin)
    VALUES (p_username, p_email, p_password, v_is_admin);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error al insertar usuario: ' || SQLERRM);
END;
/

-- Agregar un nuevo artículo
CREATE OR REPLACE PROCEDURE add_article(
    p_title IN VARCHAR2,
    p_text IN CLOB,
    p_user_id IN NUMBER
) AS
BEGIN
    INSERT INTO articles (title, article_text, user_id)
    VALUES (p_title, p_text, p_user_id);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error al insertar artículo: ' || SQLERRM);
END;
/

-- Agregar un nuevo comentario
CREATE OR REPLACE PROCEDURE add_comment(
    p_article_id IN NUMBER,
    p_user_id IN NUMBER,
    p_text IN CLOB
) AS
    v_username users.username%TYPE;
BEGIN
    SELECT username INTO v_username FROM users WHERE user_id = p_user_id;

    INSERT INTO comments (
        article_id, user_id, name, url, text, created_at
    )
    VALUES (
        p_article_id, p_user_id, v_username, NULL, p_text, SYSDATE
    );
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Error al insertar comentario: ' || SQLERRM);
END;
/

-- Agregar una nueva etiqueta (tag)
CREATE OR REPLACE PROCEDURE add_tag(
    p_tag_name IN VARCHAR2
) AS
BEGIN
    INSERT INTO tags (tag_name) VALUES (p_tag_name);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20004, 'Error al insertar tag: ' || SQLERRM);
END;
/

-- Agregar una nueva categoría
CREATE OR REPLACE PROCEDURE add_category(
    p_category_name IN VARCHAR2
) AS
BEGIN
    INSERT INTO categories (category_name) VALUES (p_category_name);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20005, 'Error al insertar categoría: ' || SQLERRM);
END;
/

-- Relacionar un artículo con una categoría
CREATE OR REPLACE PROCEDURE add_article_category(
    p_article_id IN NUMBER,
    p_category_id IN NUMBER
) AS
BEGIN
    INSERT INTO article_categories (article_id, category_id)
    VALUES (p_article_id, p_category_id);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20007, 'Error al asociar categoría con artículo: ' || SQLERRM);
END;
/

-- Relacionar un artículo con una etiqueta
CREATE OR REPLACE PROCEDURE add_article_tag(
    p_article_id IN NUMBER,
    p_tag_id IN NUMBER
) AS
BEGIN
    INSERT INTO article_tags (article_id, tag_id)
    VALUES (p_article_id, p_tag_id);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20006, 'Error al asociar tag con artículo: ' || SQLERRM);
END;
/

--------------------------------------------------------------------------------
-- 5. FUNCIONES DE LECTURA
--------------------------------------------------------------------------------

-- Función para obtener todas las categorías
CREATE OR REPLACE FUNCTION get_all_categories
    RETURN types.ref_cursor
AS
    categories_cursor types.ref_cursor;
BEGIN
    OPEN categories_cursor FOR
        SELECT category_id, category_name
        FROM categories
        ORDER BY category_name ASC;
    RETURN categories_cursor;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20015, 'Error al obtener categorías: ' || SQLERRM);
END;
/

-- Función para obtener todos los usuarios
CREATE OR REPLACE FUNCTION get_all_users
    RETURN types.ref_cursor
AS
    users_cursor types.ref_cursor;
BEGIN
    OPEN users_cursor FOR
        SELECT user_id, username, email, is_admin
        FROM users
        ORDER BY username ASC;
    RETURN users_cursor;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20029, 'Error al obtener usuarios: ' || SQLERRM);
END;
/

-- Función para obtener todos los tags
CREATE OR REPLACE FUNCTION get_all_tags
    RETURN types.ref_cursor
AS
    tags_cursor types.ref_cursor;
BEGIN
    OPEN tags_cursor FOR
        SELECT tag_id, tag_name
        FROM tags
        ORDER BY tag_name ASC;
    RETURN tags_cursor;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20030, 'Error al obtener tags: ' || SQLERRM);
END;
/

-- Función para obtener todos los artículos 
CREATE OR REPLACE FUNCTION get_all_articles_for_admin
    RETURN types.ref_cursor
AS
    articles_cursor types.ref_cursor;
BEGIN
    OPEN articles_cursor FOR
        SELECT a.article_id, a.title, a.article_date, u.username
        FROM articles a
        JOIN users u ON a.user_id = u.user_id
        ORDER BY a.article_date DESC;
    RETURN articles_cursor;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20031, 'Error al obtener artículos para admin: ' || SQLERRM);
END;
/

-- Función para obtener el detalle de un artículo (para edición)
CREATE OR REPLACE FUNCTION get_article_details(p_article_id IN NUMBER)
    RETURN types.ref_cursor
AS
    details_cursor types.ref_cursor;
BEGIN
    OPEN details_cursor FOR
        SELECT a.article_id, a.title, a.article_text, a.user_id, a.article_date, c.category_id
        FROM articles a
        LEFT JOIN article_categories ac ON a.article_id = ac.article_id
        LEFT JOIN categories c ON ac.category_id = c.category_id
        WHERE a.article_id = p_article_id;
    RETURN details_cursor;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20032, 'Error al obtener detalles del artículo: ' || SQLERRM);
END;
/

-- Función para obtener todos los comentarios (para moderación)
CREATE OR REPLACE FUNCTION get_all_comments_for_admin
    RETURN types.ref_cursor
AS
    comments_cursor types.ref_cursor;
BEGIN
    OPEN comments_cursor FOR
        SELECT 
            c.comment_id, 
            c.name AS commenter_name, 
            c.text AS comment_text, 
            a.title AS article_title, 
            c.created_at
        FROM comments c
        JOIN articles a ON c.article_id = a.article_id
        ORDER BY c.created_at DESC;
    RETURN comments_cursor;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20033, 'Error al obtener comentarios: ' || SQLERRM);
END;
/


--------------------------------------------------------------------------------
-- 6. PROCEDIMIENTOS DE ACTUALIZACIÓN Y ELIMINACIÓN (Update, Delete)
--------------------------------------------------------------------------------

-- Procedimiento para actualizar la contraseña de un usuario
CREATE OR REPLACE PROCEDURE update_user_password(
    p_user_id IN NUMBER,
    p_new_password IN VARCHAR2
) AS
BEGIN
    UPDATE users
    SET password = p_new_password
    WHERE user_id = p_user_id;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20008, 'Error al actualizar la contraseña: ' || SQLERRM);
END;
/

--  Procedimiento para ascender un usuario a administrador (IS_ADMIN = 1)
CREATE OR REPLACE PROCEDURE promote_user(
    p_user_id IN NUMBER
) AS
BEGIN
    UPDATE users
    SET is_admin = 1
    WHERE user_id = p_user_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20009, 'Usuario no encontrado para promoción.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20010, 'Error al promover usuario: ' || SQLERRM);
END;
/

-- Procedimiento para degradar un usuario a rol normal (IS_ADMIN = 0)
CREATE OR REPLACE PROCEDURE demote_user(
    p_user_id IN NUMBER
) AS
BEGIN
    UPDATE users
    SET is_admin = 0
    WHERE user_id = p_user_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20011, 'Usuario no encontrado para degradación.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20012, 'Error al degradar usuario: ' || SQLERRM);
END;
/

-- Actualizar un artículo existente
CREATE OR REPLACE PROCEDURE update_article(
    p_article_id IN NUMBER,
    p_title IN VARCHAR2,
    p_text IN CLOB
) AS
BEGIN
    UPDATE articles
    SET title = p_title,
        article_text = p_text
    WHERE article_id = p_article_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20013, 'Artículo no encontrado para actualizar.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20014, 'Error al actualizar artículo: ' || SQLERRM);
END;
/

-- Eliminar un artículo (y sus relaciones/comentarios)
CREATE OR REPLACE PROCEDURE delete_article(
    p_article_id IN NUMBER
) AS
BEGIN
    DELETE FROM articles WHERE article_id = p_article_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20015, 'Artículo no encontrado para eliminar.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20016, 'Error al eliminar artículo: ' || SQLERRM);
END;
/

-- Actualizar una categoría existente
CREATE OR REPLACE PROCEDURE update_category(
    p_category_id IN NUMBER,
    p_new_name IN VARCHAR2
) AS
BEGIN
    UPDATE categories
    SET category_name = p_new_name
    WHERE category_id = p_category_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20017, 'Categoría no encontrada para actualizar.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20018, 'Error al actualizar categoría: ' || SQLERRM);
END;
/

-- Eliminar una categoría (y sus relaciones de artículos)
CREATE OR REPLACE PROCEDURE delete_category(
    p_category_id IN NUMBER
) AS
BEGIN
    -- ON DELETE CASCADE manejará la eliminación de article_categories
    DELETE FROM categories WHERE category_id = p_category_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20019, 'Categoría no encontrada para eliminar.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20020, 'Error al eliminar categoría: ' || SQLERRM);
END;
/

-- Actualizar una etiqueta (tag) existente
CREATE OR REPLACE PROCEDURE update_tag(
    p_tag_id IN NUMBER,
    p_new_name IN VARCHAR2
) AS
BEGIN
    UPDATE tags
    SET tag_name = p_new_name
    WHERE tag_id = p_tag_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20021, 'Tag no encontrado para actualizar.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20022, 'Error al actualizar tag: ' || SQLERRM);
END;
/

-- Eliminar una etiqueta (tag)
CREATE OR REPLACE PROCEDURE delete_tag(
    p_tag_id IN NUMBER
) AS
BEGIN
    -- ON DELETE CASCADE manejará la eliminación de article_tags
    DELETE FROM tags WHERE tag_id = p_tag_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20023, 'Tag no encontrado para eliminar.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20024, 'Error al eliminar tag: ' || SQLERRM);
END;
/

-- Eliminar un comentario
CREATE OR REPLACE PROCEDURE delete_comment(
    p_comment_id IN NUMBER
) AS
BEGIN
    DELETE FROM comments
    WHERE comment_id = p_comment_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20025, 'Comentario no encontrado para eliminar.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20026, 'Error al eliminar comentario: ' || SQLERRM);
END;
/

-- Eliminar un usuario
CREATE OR REPLACE PROCEDURE delete_user(
    p_user_id IN NUMBER
) AS
BEGIN
    
    -- Eliminamos los artículos del usuario (borran relaciones y comentarios)
    DELETE FROM articles WHERE user_id = p_user_id;

    -- Eliminamos el usuario
    DELETE FROM users WHERE user_id = p_user_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20027, 'Usuario no encontrado para eliminar.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20028, 'Error al eliminar usuario: ' || SQLERRM);
END;
/

--------------------------------------------------------------------------------
-- 7. INSERCIÓN DE DATOS DE EJEMPLO - CORREGIDO
--------------------------------------------------------------------------------

-- Ejemplos Tags (Mantenidos)
EXECUTE add_tag('Postres');
EXECUTE add_tag('Ensaladas');
EXECUTE add_tag('Guisos');
EXECUTE add_tag('Sopas');
EXECUTE add_tag('Vegano');
EXECUTE add_tag('Sin Gluten');
-- El procedimiento add_user asigna IS_ADMIN = 1 automáticamente si la clave es 'miblog'
EXECUTE add_user('Admin', 'admin@gmail.com', 'miblog', 'miblog'); 



--------------------------------------------------------------------------------
-- 8. FINALIZAR TRANSACCIÓN - CORREGIDO
--------------------------------------------------------------------------------

COMMIT;