--------------------------------------------------------------------------------
-- 1. ELIMINAR TABLAS EXISTENTES 
--------------------------------------------------------------------------------

DROP TABLE article_categories CASCADE CONSTRAINTS;
DROP TABLE article_tags CASCADE CONSTRAINTS;
DROP TABLE comments CASCADE CONSTRAINTS;
DROP TABLE articles CASCADE CONSTRAINTS;
DROP TABLE categories CASCADE CONSTRAINTS;
DROP TABLE tags CASCADE CONSTRAINTS;
DROP TABLE users CASCADE CONSTRAINTS;

-------------------------------------------------------------------------------
-- 2. CREACIÓN DE TABLAS 
--------------------------------------------------------------------------------

-- Tabla de Usuarios
CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(100) NOT NULL UNIQUE,
    email VARCHAR2(200) NOT NULL UNIQUE,
    password VARCHAR2(200) NOT NULL,
    -- 1 = Admin, 0 = Normal 
    IS_ADMIN NUMBER(1) DEFAULT 0 NOT NULL, 
    CONSTRAINT chk_username CHECK (LENGTH(username) >= 3)
);

-- Tabla de Artículos
CREATE TABLE articles (
    article_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(200) NOT NULL,
    article_date DATE DEFAULT SYSDATE,
    article_text CLOB,
    user_id NUMBER NOT NULL,
    CONSTRAINT fk_article_user FOREIGN KEY(user_id) REFERENCES users(user_id),
    CONSTRAINT chk_title CHECK (LENGTH(title) >= 3)
);

-- Tabla de Comentarios
CREATE TABLE comments (
    comment_id  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR2(100) NOT NULL, 
    url         VARCHAR2(200),        
    text        CLOB NOT NULL,          
    created_at  DATE DEFAULT SYSDATE,   
    article_id  NUMBER NOT NULL,
    user_id     NUMBER NOT NULL,

    CONSTRAINT fk_comment_article FOREIGN KEY(article_id) REFERENCES articles(article_id),
    CONSTRAINT fk_comment_user FOREIGN KEY(user_id) REFERENCES users(user_id)
);

-- Tabla de Etiquetas (Tags)
CREATE TABLE tags (
    tag_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tag_name VARCHAR2(100) NOT NULL UNIQUE
);

-- Tabla de Categorías
CREATE TABLE categories (
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR2(100) NOT NULL UNIQUE
);

-- Tabla de relación Artículos-Etiquetas
CREATE TABLE article_tags (
    article_id NUMBER NOT NULL,
    tag_id NUMBER NOT NULL,
    CONSTRAINT pk_article_tags PRIMARY KEY(article_id, tag_id),
    CONSTRAINT fk_article_tags_article FOREIGN KEY(article_id) REFERENCES articles(article_id),
    CONSTRAINT fk_article_tags_tag FOREIGN KEY(tag_id) REFERENCES tags(tag_id)
);

-- Tabla de relación Artículos-Categorías
CREATE TABLE article_categories (
    article_id NUMBER NOT NULL,
    category_id NUMBER NOT NULL,
    CONSTRAINT pk_article_categories PRIMARY KEY(article_id, category_id),
    CONSTRAINT fk_article_categories_article FOREIGN KEY(article_id) REFERENCES articles(article_id),
    CONSTRAINT fk_article_categories_category FOREIGN KEY(category_id) REFERENCES categories(category_id)
);


--------------------------------------------------------------------------------
-- 3. PROCEDIMIENTOS ALMACENADOS
--------------------------------------------------------------------------------

-- Agregar un nuevo usuario (Contiene la CLAVE SECRETA para admin)
CREATE OR REPLACE PROCEDURE add_user(
    p_username IN VARCHAR2,
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_admin_key IN VARCHAR2 DEFAULT NULL
) AS
    v_is_admin users.is_admin%TYPE := 0;
    CLAVE_SECRETA CONSTANT VARCHAR2(50) := 'miblog';
BEGIN
    -- Si la clave secreta coincide, se asigna el rol de administrador.
    IF p_admin_key IS NOT NULL AND TRIM(p_admin_key) = CLAVE_SECRETA THEN
        v_is_admin := 1;
    END IF;

    INSERT INTO users (username, email, password, is_admin)
    VALUES (p_username, p_email, p_password, v_is_admin);

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error al insertar usuario: ' || SQLERRM);
END;
/

-- Agregar un nuevo artículo
CREATE OR REPLACE PROCEDURE add_article(
    p_title IN VARCHAR2,
    p_text IN CLOB,
    p_user_id IN NUMBER
) AS
BEGIN
    INSERT INTO articles (title, article_text, user_id)
    VALUES (p_title, p_text, p_user_id);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error al insertar artículo: ' || SQLERRM);
END;
/

-- Agregar un nuevo comentario
CREATE OR REPLACE PROCEDURE add_comment(
    p_article_id IN NUMBER,
    p_user_id IN NUMBER,
    p_text IN CLOB
) AS
    v_username users.username%TYPE;
BEGIN
    SELECT username INTO v_username FROM users WHERE user_id = p_user_id;

    INSERT INTO comments (
        article_id, user_id, name, url, text, created_at
    )
    VALUES (
        p_article_id, p_user_id, v_username, NULL, p_text, SYSDATE
    );
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Error al insertar comentario: ' || SQLERRM);
END;
/

-- Agregar una nueva etiqueta (tag)
CREATE OR REPLACE PROCEDURE add_tag(
    p_tag_name IN VARCHAR2
) AS
BEGIN
    INSERT INTO tags (tag_name) VALUES (p_tag_name);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20004, 'Error al insertar tag: ' || SQLERRM);
END;
/

-- Permite al administrador añadir categorías desde la aplicación.
CREATE OR REPLACE PROCEDURE add_category(
    p_category_name IN VARCHAR2
) AS
BEGIN
    INSERT INTO categories (category_name) VALUES (p_category_name);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20005, 'Error al insertar categoría: ' || SQLERRM);
END;
/

-- Relacionar un artículo con una categoría
CREATE OR REPLACE PROCEDURE add_article_category(
    p_article_id IN NUMBER,
    p_category_id IN NUMBER
) AS
BEGIN
    INSERT INTO article_categories (article_id, category_id)
    VALUES (p_article_id, p_category_id);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20007, 'Error al asociar categoría con artículo: ' || SQLERRM);
END;
/

-- Relacionar un artículo con una etiqueta
CREATE OR REPLACE PROCEDURE add_article_tag(
    p_article_id IN NUMBER,
    p_tag_id IN NUMBER
) AS
BEGIN
    INSERT INTO article_tags (article_id, tag_id)
    VALUES (p_article_id, p_tag_id);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20006, 'Error al asociar tag con artículo: ' || SQLERRM);
END;
/

--OBTENER CATEGORÍAS ORDENADAS

CREATE OR REPLACE PACKAGE types
AS
    TYPE ref_cursor IS REF CURSOR;
END types;
/

-- Función para obtener todas las categorías ordenadas alfabéticamente
CREATE OR REPLACE FUNCTION get_all_categories
    RETURN types.ref_cursor
AS
    categories_cursor types.ref_cursor;
BEGIN
    OPEN categories_cursor FOR
        SELECT category_id, category_name
        FROM categories
        ORDER BY category_name ASC; 
    RETURN categories_cursor;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20015, 'Error al obtener categorías: ' || SQLERRM);
END;
/

--------------------------------------------------------------------------------
-- 4. PROCEDIMIENTOS DE ADMINISTRACIÓN
--------------------------------------------------------------------------------

-- Procedimiento para actualizar la contraseña de un usuario
CREATE OR REPLACE PROCEDURE update_user_password(
    p_user_id IN NUMBER,
    p_new_password IN VARCHAR2
) AS
BEGIN
    UPDATE users
    SET password = p_new_password
    WHERE user_id = p_user_id;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20008, 'Error al actualizar la contraseña: ' || SQLERRM);
END;
/

-- Procedimiento para ascender un usuario a administrador (IS_ADMIN = 1)
CREATE OR REPLACE PROCEDURE promote_user(
    p_user_id IN NUMBER
) AS
BEGIN
    UPDATE users
    SET is_admin = 1
    WHERE user_id = p_user_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20009, 'Usuario no encontrado para promoción.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20010, 'Error al promover usuario: ' || SQLERRM);
END;
/

-- Procedimiento para degradar un usuario a rol normal (IS_ADMIN = 0)
CREATE OR REPLACE PROCEDURE demote_user(
    p_user_id IN NUMBER
) AS
BEGIN
    UPDATE users
    SET is_admin = 0
    WHERE user_id = p_user_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20011, 'Usuario no encontrado para degradación.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20012, 'Error al degradar usuario: ' || SQLERRM);
END;
/


--------------------------------------------------------------------------------
-- 5. INSERCIÓN DE DATOS DE EJEMPLO
--------------------------------------------------------------------------------

-- Ejemplos Tags
INSERT INTO tags (tag_name) VALUES ('Postres');
INSERT INTO tags (tag_name) VALUES ('Ensaladas');
INSERT INTO tags (tag_name) VALUES ('Guisos');
INSERT INTO tags (tag_name) VALUES ('Sopas');
INSERT INTO tags (tag_name) VALUES ('Vegano');
INSERT INTO tags (tag_name) VALUES ('Sin Gluten');


-- Hacer que el user_id = 1 sea admin
EXECUTE add_user('Admin', 'admin@gmail.com', 'miblog');
UPDATE users
SET IS_ADMIN = 1
WHERE USER_ID = 1;

--------------------------------------------------------------------------------
-- 6. FINALIZAR TRANSACCIÓN
--------------------------------------------------------------------------------

COMMIT;