SELECT * FROM USERS









--------------------------------------------------------------------------------
-- ELIMINAR TABLAS (DROP)
--------------------------------------------------------------------------------
DROP TABLE article_categories CASCADE CONSTRAINTS;
DROP TABLE article_tags CASCADE CONSTRAINTS;
DROP TABLE comments CASCADE CONSTRAINTS;
DROP TABLE articles CASCADE CONSTRAINTS;
DROP TABLE categories CASCADE CONSTRAINTS;
DROP TABLE tags CASCADE CONSTRAINTS;
DROP TABLE users CASCADE CONSTRAINTS;

-------------------------------------------------------------------------------
-- 1. CREACIÓN DE TABLAS
--------------------------------------------------------------------------------

-- Tabla de Usuarios
CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(100) NOT NULL UNIQUE,
    email VARCHAR2(200) NOT NULL UNIQUE,
    password VARCHAR2(200) NOT NULL,
    CONSTRAINT chk_username CHECK (LENGTH(username) >= 3)
);

-- Tabla de Artículos
CREATE TABLE articles (
    article_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(200) NOT NULL,
    article_date DATE DEFAULT SYSDATE,
    article_text CLOB,
    user_id NUMBER NOT NULL,
    CONSTRAINT fk_article_user FOREIGN KEY(user_id) REFERENCES users(user_id),
    CONSTRAINT chk_title CHECK (LENGTH(title) >= 3)
);

-- Tabla de Comentarios
CREATE TABLE comments (
    comment_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR2(100) NOT NULL, 
    url          VARCHAR2(200),       
    text         CLOB NOT NULL,          
    created_at   DATE DEFAULT SYSDATE,   
    article_id   NUMBER NOT NULL,
    user_id      NUMBER NOT NULL,

    CONSTRAINT fk_comment_article FOREIGN KEY(article_id) REFERENCES articles(article_id),
    CONSTRAINT fk_comment_user FOREIGN KEY(user_id) REFERENCES users(user_id)
);

-- Tabla de Etiquetas (Tags)
CREATE TABLE tags (
    tag_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tag_name VARCHAR2(100) NOT NULL UNIQUE
);

-- Tabla de Categorías
CREATE TABLE categories (
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR2(100) NOT NULL UNIQUE
);

-- Tabla de relación Artículos-Etiquetas
CREATE TABLE article_tags (
    article_id NUMBER NOT NULL,
    tag_id NUMBER NOT NULL,
    CONSTRAINT pk_article_tags PRIMARY KEY(article_id, tag_id),
    CONSTRAINT fk_article_tags_article FOREIGN KEY(article_id) REFERENCES articles(article_id),
    CONSTRAINT fk_article_tags_tag FOREIGN KEY(tag_id) REFERENCES tags(tag_id)
);

-- Tabla de relación Artículos-Categorías
CREATE TABLE article_categories (
    article_id NUMBER NOT NULL,
    category_id NUMBER NOT NULL,
    CONSTRAINT pk_article_categories PRIMARY KEY(article_id, category_id),
    CONSTRAINT fk_article_categories_article FOREIGN KEY(article_id) REFERENCES articles(article_id),
    CONSTRAINT fk_article_categories_category FOREIGN KEY(category_id) REFERENCES categories(category_id)
);


--------------------------------------------------------------------------------
-- 3. PROCEDIMIENTOS ALMACENADOS
--------------------------------------------------------------------------------

-- Agregar un nuevo usuario
CREATE OR REPLACE PROCEDURE add_user(
    p_username IN VARCHAR2,
    p_email IN VARCHAR2,
    p_password IN VARCHAR2
) AS
BEGIN
    INSERT INTO users (username, email, password)
    VALUES (p_username, p_email, p_password);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error al insertar usuario: ' || SQLERRM);
END;
/

-- Agregar un nuevo artículo
CREATE OR REPLACE PROCEDURE add_article(
    p_title IN VARCHAR2,
    p_text IN CLOB,
    p_user_id IN NUMBER
) AS
BEGIN
    INSERT INTO articles (title, article_text, user_id)
    VALUES (p_title, p_text, p_user_id);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error al insertar artículo: ' || SQLERRM);
END;
/

-- Agregar un nuevo comentario (Versión actualizada y unificada)
CREATE OR REPLACE PROCEDURE add_comment(
    p_article_id IN NUMBER,
    p_user_id IN NUMBER,
    p_text IN CLOB
) AS
    v_username users.username%TYPE;
BEGIN
    -- 1. Busca el nombre de usuario basado en el ID proporcionado
    SELECT username INTO v_username FROM users WHERE user_id = p_user_id;

    -- 2. Inserta el comentario con el nombre de usuario y el texto
    INSERT INTO comments (
        article_id, 
        user_id, 
        name, -- Rellena el nombre del usuario automáticamente
        url,
        text, 
        created_at
    )
    VALUES (
        p_article_id, 
        p_user_id, 
        v_username, -- El nombre de usuario encontrado
        NULL, -- El campo URL se deja nulo por ahora
        p_text, 
        SYSDATE
    );
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Error al insertar comentario: ' || SQLERRM);
END;
/

-- Agregar una nueva etiqueta (tag)
CREATE OR REPLACE PROCEDURE add_tag(
    p_tag_name IN VARCHAR2
) AS
BEGIN
    INSERT INTO tags (tag_name) VALUES (p_tag_name);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20004, 'Error al insertar tag: ' || SQLERRM);
END;
/

-- Agregar una nueva categoría
CREATE OR REPLACE PROCEDURE add_category(
    p_category_name IN VARCHAR2
) AS
BEGIN
    INSERT INTO categories (category_name) VALUES (p_category_name);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20005, 'Error al insertar categoría: ' || SQLERRM);
END;
/

-- Relacionar un artículo con una etiqueta
CREATE OR REPLACE PROCEDURE add_article_tag(
    p_article_id IN NUMBER,
    p_tag_id IN NUMBER
) AS
BEGIN
    INSERT INTO article_tags (article_id, tag_id)
    VALUES (p_article_id, p_tag_id);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20006, 'Error al asociar tag con artículo: ' || SQLERRM);
END;
/

-- Relacionar un artículo con una categoría
CREATE OR REPLACE PROCEDURE add_article_category(
    p_article_id IN NUMBER,
    p_category_id IN NUMBER
) AS
BEGIN
    INSERT INTO article_categories (article_id, category_id)
    VALUES (p_article_id, p_category_id);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20007, 'Error al asociar categoría con artículo: ' || SQLERRM);
END;
/


--------------------------------------------------------------------------------
-- 4. FUNCIONES
--------------------------------------------------------------------------------

-- Obtener todos los artículos de un usuario
CREATE OR REPLACE FUNCTION get_articles_by_user(
    p_user_id IN NUMBER
) RETURN SYS_REFCURSOR AS
    cur SYS_REFCURSOR;
BEGIN
    OPEN cur FOR
        SELECT article_id, title, article_date, article_text
        FROM articles
        WHERE user_id = p_user_id;
    RETURN cur;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20008, 'Error al consultar artículos: ' || SQLERRM);
END;
/

-- Obtener los comentarios de un artículo (Versión actualizada)
CREATE OR REPLACE FUNCTION get_comments_by_article(
    p_article_id IN NUMBER
) RETURN SYS_REFCURSOR AS
    cur SYS_REFCURSOR;
BEGIN
    OPEN cur FOR
        SELECT
            c.comment_id,
            u.username,   -- Incluye el nombre de usuario del comentarista
            c.name,       -- Mantenido por compatibilidad, pero puede ser redundante
            c.user_id
        FROM
            comments c
        JOIN
            users u ON c.user_id = u.user_id -- Unión para obtener el username
        WHERE
            c.article_id = p_article_id
        ORDER BY
            c.comment_id ASC;
    RETURN cur;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20009, 'Error al consultar comentarios: ' || SQLERRM);
END;
/

-- Obtener las etiquetas de un artículo
CREATE OR REPLACE FUNCTION get_tags_by_article(
    p_article_id IN NUMBER
) RETURN SYS_REFCURSOR AS
    cur SYS_REFCURSOR;
BEGIN
    OPEN cur FOR
        SELECT t.tag_id, t.tag_name
        FROM tags t
        JOIN article_tags at ON t.tag_id = at.tag_id
        WHERE at.article_id = p_article_id;
    RETURN cur;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20010, 'Error al consultar tags: ' || SQLERRM);
END;
/

-- Obtener las categorías de un artículo
CREATE OR REPLACE FUNCTION get_categories_by_article(
    p_article_id IN NUMBER
) RETURN SYS_REFCURSOR AS
    cur SYS_REFCURSOR;
BEGIN
    OPEN cur FOR
        SELECT c.category_id, c.category_name
        FROM categories c
        JOIN article_categories ac ON c.category_id = ac.category_id
        WHERE ac.article_id = p_article_id;
    RETURN cur;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20011, 'Error al consultar categorías: ' || SQLERRM);
END;
/

--------------------------------------------------------------------------------
-- 5. INSERCIÓN DE DATOS DE EJEMPLO
--------------------------------------------------------------------------------

--Ejemplos Categorias
INSERT INTO categories (category_name) VALUES ('Comida Americana');
INSERT INTO categories (category_name) VALUES ('Comida Mexicana');
INSERT INTO categories (category_name) VALUES ('Comida Mediterránea');
INSERT INTO categories (category_name) VALUES ('Comida Española');
INSERT INTO categories (category_name) VALUES ('Comida Italiana');
INSERT INTO categories (category_name) VALUES ('Comida Japonesa');
INSERT INTO categories (category_name) VALUES ('Comida China');

-- >>>>>> AÑADIDO <<<<<< --
-- Ejemplos Tags
INSERT INTO tags (tag_name) VALUES ('Postres');
INSERT INTO tags (tag_name) VALUES ('Ensaladas');
INSERT INTO tags (tag_name) VALUES ('Guisos');
INSERT INTO tags (tag_name) VALUES ('Sopas');
INSERT INTO tags (tag_name) VALUES ('Vegano');
INSERT INTO tags (tag_name) VALUES ('Sin Gluten');

-- Guardar los cambios permanentemente
COMMIT;